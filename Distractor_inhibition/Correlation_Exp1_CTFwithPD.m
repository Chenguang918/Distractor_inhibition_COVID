clear
sub = [3:34];
load('G:\COVID\TF-analysis-Exp4\PD_Mean_invalid.mat')
sub_remove =[22,30];
for i=1:length(sub_remove)
ind=find(sub == sub_remove(length(sub_remove)+1-i));
sub(ind)=[];
PD(ind)=[];
end
nSubs = length(sub);
cd 'G:\COVID\Test4CTF'
root = pwd; out = 'AnalysisScripts';
dRoot = [root(1:end-length(out)),'Data/'];
% specify filename of data to plot
name = '_SpatialTF.mat';

% Plot specs
nChans = 10; % number of location-selective channels
view3d = [90 90]; % view angle of 3d plots
ts = 15; % title size
fs = 9; % font size
lim = [-0.15 0.15]; % limits on color map and channel response axis
lim2 = [-1.2 1.2];
times = -200:4:1200;
markerPos = -165; % position of the significance marker

root = pwd;
for itask = 1:2
% loop through participants and grab tf generated by forward model
for i = 1:nSubs
    sn = itask*100+sub(i);
    fName = [dRoot,num2str(sn),name];
    load(fName)
    fois = ismember(em.bands,'Alpha');
    t_ctf(i,:,:) = squeeze(mean(mean(em.tfs.total(fois,1:10,:,:,:),4),2)); % grab data, average across iterations (dimension 2) and test blocks (dimension 4). 
end


% average data across subjects, mirror the -180 channel at +180
t_ctf(:,:,11) = t_ctf(:,:,2); t_ctf(:,:,12) = t_ctf(:,:,1);
tctf = squeeze(mean(t_ctf,1)); 
nTimes = size(t_ctf,2); nCh = size(t_ctf,3);
% baseline correction
% bc =mean(tctf(76:126,:),1);
% bc_dat = repmat(bc,nTimes,1);
% tctf = tctf - bc_dat;
ctf_all_dat(itask,:,:,:) = t_ctf;
Z(itask,:,:) = tctf';
% Setup plot axes
x = linspace(-180,180,nChans+2);
 nBins = length(x);
X = repmat(x',1,nTimes);
Y = repmat(em.time,nBins,1);

% Plot time-resolved total tuning function
FigHandle = figure('Position', [100, 100, 480, 180]); % size of the plot
surf(X,Y,tctf','EdgeColor','none','LineStyle','none','FaceLighting','phong')
shading interp
h=findobj('type','patch');
set(h,'linewidth',2)
hold on
set(gca, 'box','off')
set(gca,'color','none')
set(gca,'LineWidth',1,'TickDir','out');
set(gca,'FontSize',fs)
set(gca,'FontName','Arial Narrow')
view(view3d)
axis([x(1) x(end) -200 1200 lim]);
set(gca,'XTick',[-180:90:180])
set(gca,'YTick',[-500:500:2000])
% title('Total Power','FontSize',ts)
xlabel({'Channel Offset'});
ylabel('Time (ms)');
set(get(gca,'xlabel'),'rotation',90); %where angle is in degrees
caxis([lim])
grid off
c = colorbar;
ax = gca;
axpos = ax.Position;
cpos = c.Position;
cpos(3) = 0.3*cpos(3);
c.Position = cpos;
ax.Position = axpos;
ylabel(c, 'Channel Response');
% saveas(gcf, num2str(sn), 'jpg')
clear t_ctf
end

%% Plot difference of time-resolved total tuning function
FigHandle = figure('Position', [100, 100, 480, 180]); % size of the plot
Z_data=squeeze(Z(1,:,:)-Z(2,:,:));
surf(X,Y,Z_data,'EdgeColor','none','LineStyle','none','FaceLighting','phong')
shading interp
h=findobj('type','patch');
set(h,'linewidth',2)
hold on
set(gca, 'box','off')
set(gca,'color','none')
set(gca,'LineWidth',1,'TickDir','out');
set(gca,'FontSize',fs)
set(gca,'FontName','Arial Narrow')
view(view3d)
axis([x(1) x(end) -200 1200 -0.15 0.15]);
set(gca,'XTick',[-180:90:180])
set(gca,'YTick',[-500:500:2000])
% title('Total Power','FontSize',ts)
xlabel({'Channel Offset'});
ylabel('Time (ms)');
set(get(gca,'xlabel'),'rotation',90); %where angle is in degrees
grid off
c = colorbar;
ax = gca;
axpos = ax.Position;
cpos = c.Position;
cpos(3) = 0.3*cpos(3);
c.Position = cpos;
ax.Position = axpos;
ylabel(c, 'Channel Response');

%% 
nSamps=500;
for itask=1:2

for isub=1:nSubs
    for samp = 1:nSamps
        dat = squeeze(ctf_all_dat(itask,isub,samp,:));
        x = 1:6;
        d = [mean([dat(1),dat(12)]),mean([dat(2),dat(11)]),mean([dat(3),dat(10)]),mean([dat(4),dat(9)]),mean([dat(5),dat(8)]),mean([dat(6),dat(7)])];
        fit = polyfit(x,d,1);
        r.total(itask,samp,isub)= fit(1) ;
    end
end
end
bc=squeeze(mean(r.total(:,76:126,:),2));
for i=1:500
   bc_all(:,i,:) =bc;
end
r.total=r.total-bc_all;
[h,p,ci,stats]=ttest(squeeze(r.total(1,:,:))',squeeze(r.total(2,:,:))','alpha',0.06);
sig_latency=find(h==1);
%%
bIter = 10000;
boot.IDX = nan(bIter,nSubs);
boot.SLOPE = nan(bIter,nSubs,nSamps);
boot.M = nan(bIter,nSamps);
color=[1 0 0; 0 0 1];
figure
for itask=1:2
slopes=squeeze(r.total(itask,:,:));
% loop through bootstrap replications
for b = 1:bIter
    fprintf('Bootstrap replication %d out of %d\n', b, bIter)
    
    [bSLOPE idx] = datasample(slopes',nSubs,1); % sample nSubs many observations from realSl for the subs dimensions (with replacement)
    boot.IDX(b,:) = idx;      % save bootstrap sample index
    boot.SLOPE(b,:,:) = bSLOPE;   % save bootstrapped CTFs
    boot.M(b,:) = mean(bSLOPE); % get the mean osbserved slope (across subs)
    
end

% calculate the bootstrapped SE
ctfSlope.boot.SE = std(boot.M);

% calculate actual mean CTF
ctfSlope.mn = mean(slopes');
%
Y1 = ctfSlope.mn-ctfSlope.boot.SE; Y2=ctfSlope.mn + ctfSlope.boot.SE;
shadedPlot(em.time,Y1,Y2,color(itask,:))
hold
end
plot(em.time,squeeze(mean(r.total(1,:,:),3)),'Color','r');
hold on
plot(em.time,squeeze(mean(r.total(2,:,:),3)),'Color','b');
% plot(em.time,h*0.01)
% hold on
legend('Valid','Invalid')
axis([-200 1200 -0.03 0.08]);
%% correlate with PD amp

CTF=squeeze(r.total(2,:,:))';
[R1,P1,R2,P2,R3,P3,Rs,Ps,Target_data] = function_multi_correlation(sub,PD,'PD',CTF,'CTF',em.time,0,[1060,1095],0.5);